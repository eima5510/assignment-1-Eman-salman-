********* BASIC DATA TYPES*******

# find runner up score code:
if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())
    print(sorted(set(arr))[-2])
    
    
# nested list code:
grades = []
if __name__ == '__main__':
    for _ in range(int(input())):
        name = input()
        score = float(input())
        grades.append([name,score])
    grades=sorted(grades)
    for name, score in grades:
        if score == sorted(list(set([score for name, score in grades])))[1]:
            print(name)
            
# finding the percentage code:
if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    
    query_name = input()
    print('%0.2f' % (sum(student_marks[query_name])/len(student_marks[query_name])))


# lists code:
if __name__ == '__main__':
    N = int(input())
    arr = []
    for i in range(N):
        S = input().split()
        if S[0] == 'insert':
            arr.insert(int(S[1]),int(S[2]))
            
        elif S[0] == 'print':
            print(arr)
            
        elif S[0] == 'remove':
            arr.remove(int(S[1]))
            
        elif S[0] == 'append': 
            arr.append(int(S[1]))
            
        elif S[0] == 'sort':
            arr.sort()
            
        elif S[0] == 'reverse':
            arr.reverse()
            
        elif S[0] == 'pop':
            arr.pop()

#tuples code:
if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())
    
    list_tuple = [x for x in integer_list]
    t = tuple(list_tuple)
    print(hash(t))
    
 ********** STRINGS *************
 
# string split and join code:

def split_and_join(line):
    return line.replace(' ','-')
    # write your code here

if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)
    
    
#What's your name code:


def print_full_name(first, last):
    print ("Hello {} {}! You just delved into python.".format(first, last))
    return first, last
    # Write your code here

if __name__ == '__main__':
    first_name = input()
    last_name = input()
    print_full_name(first_name, last_name)
    
#mutations code:

def mutate_string(string, position, character):
    character_list= list(string)
    character_list[position]=character
    return ''.join(character_list)

if __name__ == '__main__':
    s = input()
    i, c = input().split()
    s_new = mutate_string(s, int(i), c)
    print(s_new)
    
# text wrap code:

import textwrap

def wrap(string, max_width):
    return textwrap.fill(string,max_width)

if __name__ == '__main__':
    string, max_width = input(), int(input())
    result = wrap(string, max_width)
    print(result)
    
    
*****SETS*******

#symmetric difference code:

M = int(input())
a = set(input().split())
N = int(input())
b = set(input().split())

ansx = a.difference(b)
ansy = b.differansxce(a)
ans = ansx.union(ansy)

print(*sorted(ans,key=int),sep='\n')

Set .discard(), .remove() & .pop() code:

# Enter your code here. Read input from STDIN. Print output to STDOUT

N= int(input())
s=set(map(int,input().split()))

for i in range(N):
    opr=input().split()
    
    
if len(opr) <2:
    s.pop()
else:
    if opr[1]=="remove":
        s.remove(int(opr[1]))
    else: s.discard(int(opr[1]))
    
print(sum(s))


#Set .add() code:

# Enter your code here. Read input from STDIN. Print output to STDOUT

N =(input())
country_stamp= set()
for i in range(int(N)):
    Stamp=(input())
    country_stamp.add(Stamp)
print(len(country_stamp))


#check subset code:

# Enter your code here. Read input from STDIN. Print output to STDOUT

for i in range(int(input())): 
    a = int(input())
    A = set(input().split()) 
    b = int(input())
    B = set(input().split())
    print(A <= B)



********* ITERtools *****

#itertools.permuattions code:

from itertools import permutations

s,k = input().split()

words = list(permutations(s,int(k)))
words = sorted(words, reverse=False)
for word in words:
    print(*word,sep='')
    
    
# itertools.combinations code:

from itertools import combinations

word, count = input().split()
out = []
for i in range(1, int(count)+1): out.extend(list(combinations(sorted(word), i)))
for i in out: print(''.join(i))


# itertools.cobinations with replacement code:


from itertools import combinations

a = input().split()

for i in range(1, int(a[1]) + 1):
    for j in combinations(sorted(a[0]), i):
        print (''.join(j))
        
        
        
#itertools.product code:

from itertools import product
A = list(map(int, input().split()))
B = list(map(int, input().split()))
l = list(product(A,B))

for x in l:
    print(x, end=" ")
    
    
    
********* collections *********

#collection counter code:


# Enter your code here. Read input from STDIN. Print output to STDOUT


from collections import Counter
X=input()
size=input().split()
N=int(input())
customer=[]
for i in range(N):
    customer.append(input().split())
shoes=Counter(size)
money=0
for i in customer:
    if i[0] in shoes.keys() and shoes[i[0]] != 0:
        money+=int(i[1])
        shoes[i[0]]-=1
print(money)   

#collection.named tuple code:
n=int(input())

string=input().split()

index=string.index("MARKS")

total=0

for i in range(n):

    string2=input().split()

    total+=int(string2[index])
average=total/n

print(average)


# collections.deque

# Enter your code here. Read input from STDIN. Print output to STDOUT

from collections import deque
d = deque() 
for _ in range(int(input())): 
    args = input().split() 
if len(args) > 1: 
    eval("d."+args[0]+"("+args[1] +")")
else: 
    eval("d."+args[0]+"()") 
print(*d)


#collection ordered dict code:


# Enter your code here. Read input from STDIN. Print output to STDOUT


from collections import OrderedDict
products = OrderedDict()
for _ in range(int(input())):
    item,price = input().rsplit(" ",1)
    products[item] = products.get(item, 0) + int(price)
for k,v in products.items():
    print(k,v)
